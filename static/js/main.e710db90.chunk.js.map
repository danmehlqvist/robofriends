{"version":3,"sources":["Components/Card/Card.jsx","Components/Spinner/Spinner.jsx","Components/CardList/CardList.jsx","Components/SearchBox/SearchBox.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Card","props","robot","name","email","username","react_default","a","createElement","className","src","concat","alt","height","width","Spinner","CardList","_ref","robots","isLoading","Spinner_Spinner","length","map","x","Components_Card_Card","key","id","SearchBox","searchField","searchChange","onChange","type","placeholder","App","state","onSearchChange","event","value","target","_this","setState","componentDidMount","fetch","then","response","json","_this2","this","filteredRobots","filter","toLowerCase","includes","Components_SearchBox_SearchBox","Components_CardList_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mSAiBeA,EAfF,SAACC,GAAU,IACbC,EAASD,EAATC,MACAC,EAAwBD,EAAxBC,KAAMC,EAAkBF,EAAlBE,MAAMC,EAAYH,EAAZG,SAEnB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BN,EAA1B,YAA8CO,IAAG,UAAAD,OAAYR,GAAQU,OAAQ,IAAKC,MAAO,MACjGR,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,YCPL,SAASW,IACpB,OACIT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAaH,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,cCDrH,IAeeQ,EAfE,SAAAC,GAA2B,IAAxBC,EAAwBD,EAAxBC,OAAQC,EAAgBF,EAAhBE,UACxB,OACIb,EAAAC,EAAAC,cAAA,WACKW,EACGb,EAAAC,EAAAC,cAACY,EAAD,MAEAd,EAAAC,EAAAC,cAAA,WACwB,IAAlBU,EAAOG,OAAgBf,EAAAC,EAAAC,cAAA,6BAA2B,KACnDU,EAAOI,IAAI,SAAAC,GAAC,OAAIjB,EAAAC,EAAAC,cAACgB,EAAD,CAAMtB,MAAOqB,EAAGE,IAAKF,EAAEG,UCE7CC,EAbG,SAAAV,GAAiCA,EAA/BW,YAA+B,IAAlBC,EAAkBZ,EAAlBY,aAC7B,OACIvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,SACIsB,SAAUD,EACVpB,UAAU,mCACVsB,KAAK,SACLC,YAAY,oBCkDbC,gOAjDbC,MAAQ,CACNhB,OAAQ,GACRU,YAAa,GACbT,WAAW,KAGbgB,eAAiB,SAACC,GAChB,IAAMC,EAAQD,EAAME,OAAOD,MAC3BE,EAAKC,SAAS,CACZZ,YAAaS,OAIjBI,kBAAoB,WAClBC,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GACJ,IAAM3B,EAAS2B,EAAKvB,IAAI,SAAAC,GAAC,MAAK,CAC5BG,GAAIH,EAAEG,GACNvB,KAAMoB,EAAEpB,KACRE,SAAUkB,EAAElB,SACZD,MAAOmB,EAAEnB,SAEXmC,EAAKC,SAAS,CACZtB,SACAC,WAAW,+EAKV,IAAA2B,EAAAC,KACDC,EAAiBD,KAAKb,MAAMhB,OAAO+B,OAAO,SAAA/C,GAAK,OAAIA,EAAMC,KAAK+C,cAAcC,SAASL,EAAKZ,MAAMN,YAAYsB,iBAClH,OACE5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,eACAH,EAAAC,EAAAC,cAAC4C,EAAD,CACEvB,aAAckB,KAAKZ,iBAGrB7B,EAAAC,EAAAC,cAAC6C,EAAD,CACEnC,OAAQ8B,EACR7B,UAAW4B,KAAKb,MAAMf,oBA3CdmC,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.e710db90.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    const {robot} = props;\r\n    const {name, email,username} = robot;\r\n    \r\n    return(\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${username}?200x200`} alt={`Pic of ${name}`} height={200} width={200}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\n\r\nimport './Spinner.css';\r\n\r\nexport default function Spinner() {\r\n    return (\r\n        <div className=\"Spinner\">\r\n            <div className=\"lds-roller\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\nimport Card from '../Card/Card';\r\nimport Spinner from '../Spinner/Spinner';\r\n\r\n\r\nconst CardList = ({ robots, isLoading }) => {\r\n    return (\r\n        <div>\r\n            {isLoading ?\r\n                <Spinner />\r\n                :\r\n                <div>\r\n                    {(robots.length === 0) ? <h2>No robots match</h2> : null}\r\n                    {robots.map(x => <Card robot={x} key={x.id} />)}\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchField, searchChange}) => {\r\n    return (\r\n        <div className='SearchBox p2'>\r\n            <input\r\n                onChange={searchChange}\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                placeholder='Search Robots'\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\n\nimport CardList from './Components/CardList/CardList';\nimport SearchBox from './Components/SearchBox/SearchBox';\nimport Scroll from './Components/Scroll/Scroll';\n\nimport './App.css';\nimport 'tachyons';\n\nclass App extends Component {\n\n  state = {\n    robots: [],\n    searchField: '',\n    isLoading: true,\n  }\n\n  onSearchChange = (event) => {\n    const value = event.target.value;\n    this.setState({\n      searchField: value\n    });\n  }\n\n  componentDidMount = () => {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(json => {\n        const robots = json.map(x => ({\n          id: x.id,\n          name: x.name,\n          username: x.username,\n          email: x.email,\n        }));\n        this.setState({\n          robots,\n          isLoading: false,\n        });\n      })\n  }\n\n  render() {\n    const filteredRobots = this.state.robots.filter(robot => robot.name.toLowerCase().includes(this.state.searchField.toLowerCase()))\n    return (\n      <div className=\"App\">\n        <h1 className=\"f1\">Robofriends</h1>\n        <SearchBox\n          searchChange={this.onSearchChange}\n        />\n        {/* <Scroll> */}\n        <CardList\n          robots={filteredRobots}\n          isLoading={this.state.isLoading}\n        />\n        {/* </Scroll> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}